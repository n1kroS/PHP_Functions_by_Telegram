# Description
# –ü—Ä–∏–≤–µ—Ç!üëã
# –•–æ—á–µ—à—å –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ—á–µ—Ä–æ–≤ –∑–∞–ø–æ–º–Ω–∏—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —è–∑—ã–∫–∞ PHP —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∏ –æ—Ç—Å–∫–∞–∫–∏–≤–∞–ª–∏ –æ—Ç –∑—É–±–æ–≤? –ß—Ç–æ–±—ã –≤ –æ—á–µ—Ä–µ–¥–Ω–æ–π —Ä–∞–∑ –Ω–µ –≥—É–≥–ª–∏—Ç—å –∫–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤ —Ç–æ–π –∏–ª–∏ –∏–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?
# –¢–æ–≥–¥–∞ –ø–æ–≥–Ω–∞–ª–∏!üöÄ
# –ù–∞–∂–º–∏: /start
# 
# 
# 
# start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–ºüöÄ
# 
# 

import sqlite3
con = sqlite3.connect('example.db')
cur = con.cursor()

import config
import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton


# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=config.TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)


# @dp.message_handler(commands=['start', 'help'])
# async def send_welcome(message: types.Message):
#     """
#     This handler will be called when user sends `/start` or `/help` command
#     """
#     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     buttons = ["–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å QR!", "–•–æ—á—É –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π QR!"]
#     keyboard.add(*buttons)
#     # await message.answer("–ö–∞–∫ –ø–æ–¥–∞–≤–∞—Ç—å –∫–æ—Ç–ª–µ—Ç—ã?", reply_markup=keyboard)
#     await message.answer("–ü—Ä–∏–≤–µ—Ç!\n–•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç <b>QR-–∫–æ–¥ COVID</b> –∏–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–∫–∞–∑–∞—Ç—å <b>—Å–≤–æ–π</b>?\n")



# @dp.message_handler(commands="start")
# async def welcome(message: types.Message):
#     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     buttons = ["–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å QR!"]
#     keyboard.add(*buttons)
#     await message.answer("–ü—Ä–∏–≤–µ—Ç!\n–•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç <u>–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π</u> <b>QR-–∫–æ–¥ COVID</b>?\n", reply_markup=keyboard)

inline_btn_1 = InlineKeyboardButton('–ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!', callback_data='button1')
inline_btn_2 = InlineKeyboardButton('–í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç!', callback_data='button2')
inline_btn_3 = InlineKeyboardButton('–¢—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç!', callback_data='button3')
inline_btn_4 = InlineKeyboardButton('–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!', callback_data='button4')
inline_kb_full = InlineKeyboardMarkup(row_width=1).add(inline_btn_1, inline_btn_2, inline_btn_3, inline_btn_4)
# inline_kb_full.add(inline_btn_2, inline_btn_3, inline_btn_4)

@dp.callback_query_handler(func=lambda c: c.data and c.data.startswith('btn'))
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)
    if code == correct_answer:
        await bot.answer_callback_query(callback_query.id, text='"–≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!üòâ"')
    # elif code == 5:
    #     await bot.answer_callback_query(
    #         callback_query.id,
    #         text='–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º 5.\n–ê —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ üòâ', show_alert=True)
    else:
        await bot.answer_callback_query(callback_query.id, text='"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ...üòî\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: \n–ü–æ–≤—Ç–æ—Ä–∏–º —ç—Ç–æ –ø–æ–∑–∂–µ!"')
    # await bot.send_message(callback_query.from_user.id, f'–ù–∞–∂–∞—Ç–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞! code={code}')


@dp.message_handler(commands=['start'])
async def process_command_1(message: types.Message):
    await message.reply("–ü–µ—Ä–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è", reply_markup=inline_kb_full)

# @dp.message_handler(commands="start")
# async def welcome(message: types.Message):
#     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     buttons = ["–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å QR!"]
#     keyboard.add(*buttons)
#     await message.answer("–ü—Ä–∏–≤–µ—Ç!\n–•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç <u>–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π</u> <b>QR-–∫–æ–¥ COVID</b>?\n", reply_markup=keyboard)

# async def cmd_start(message: types.Message):
#     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     buttons = ["–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å QR!", "–•–æ—á—É –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π QR!"]
#     keyboard.add(*buttons)
#     await message.answer("–ö–∞–∫ –ø–æ–¥–∞–≤–∞—Ç—å –∫–æ—Ç–ª–µ—Ç—ã?", reply_markup=keyboard)


# @dp.message_handler(regexp='(^cat[s]?$|puss)')
# async def cats(message: types.Message):
#     with open('data/cats.jpg', 'rb') as photo:
#         '''
#         # Old fashioned way:
#         await bot.send_photo(
#             message.chat.id,
#             photo,
#             caption='Cats are here üò∫',
#             reply_to_message_id=message.message_id,
#         )
#         '''

#         await message.reply_photo(photo, caption='Cats are here üò∫')


# @dp.message_handler()
# async def echo(message: types.Message):

#     await message.answer(message.text)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)